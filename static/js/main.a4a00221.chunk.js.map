{"version":3,"sources":["store/reducers/scrum-poker-reducers.js","store/actions/types.js","store/reducers/index.js","store/store.js","components/Header/Header.js","store/actions/scrum-poker-actions.js","pages/Add-Story-List/Add-Story-List.js","components/Story-List-Table/Story-List-Table.js","components/Active-Story-Vote/Active-Story-Vote.js","components/Scrum-Master-Panel/Scrum-Master-Panel.js","pages/View-As-Scrum-Master/View-As-Scrum-Master.js","pages/View-As-Developer/View-As-Developer.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","sessionData","sessionName","numberOfVoters","storyList","storyName","storyPoint","status","storyId","votes","activeStory","points","scrumPokerReducers","state","action","type","payload","reducer","combineReducers","store","createStore","reducers","applyMiddleware","thunk","Header","getActiveStory","dispatch","AddStoryList","props","handleChangeSessionName","e","setState","target","value","handleChangeNumberOfVoters","replace","getStoryListAsArray","list","document","getElementById","split","map","item","index","Math","random","this","className","maxLength","onChange","id","rows","cols","onBlur","to","onClick","startSessionAction","Component","connect","StoryListTable","key","style","cursor","ActiveStoryVote","setVotesForStory","votedPoints","parseInt","length","alert","push","sendVotes","setPoints","numberOfRemainingChoice","pointArray","marginTop","marginLeft","float","marginRight","a","ScrumMasterPanel","handleFinalScore","finalScore","sendVote","endVote","filter","voterArray","Array","fill","val","i","voterId","votedPoint","marginBottom","width","ViewAsScrumMaster","display","flexDirection","justifyContent","ViewAsDeveloper","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4a00221.chunk.js","sourcesContent":["import { START_SESSION, GET_ACTIVE_STORY, SET_STORY_POINT, END_VOTE } from '../actions/types';\n\nconst INITIAL_STATE = {\n\tsessionData: {\n\t\tsessionName: 'Sprint Planning 1',\n\t\tnumberOfVoters: 1,\n\t\tstoryList: [\n\t\t\t{\n\t\t\t\tstoryName: '',\n\t\t\t\tstoryPoint: 0,\n\t\t\t\tstatus: false,\n\t\t\t\tstoryId: '',\n\t\t\t\tvotes: []\n\t\t\t}\n\t\t]\n\t},\n\tactiveStory: {\n\t\tstoryName: '',\n\t\tstoryPoint: 0,\n\t\tstatus: false,\n\t\tstoryId: '',\n\t},\n\tpoints: []\n\t// points: {\n\t// \tstoryId: '',\n\t// \tvalues: []\n\t// }\n};\n\n// sessionData is the data that we create on the first page.\n// which has the session name, number of voters and the story list.\nconst scrumPokerReducers = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase START_SESSION:\n\t\t\treturn { ...state, sessionData: action.payload };\n\t\tcase GET_ACTIVE_STORY:\n\t\t\treturn { ...state, activeStory: action.payload };\n\t\tcase SET_STORY_POINT:\n\t\t\treturn { ...state, points: action.payload };\n\t\tcase END_VOTE:\n\t\t\treturn { ...state, sessionData: action.payload, points: [] };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default scrumPokerReducers;\n","export const START_SESSION = 'start session';\nexport const GET_ACTIVE_STORY = 'get active story';\nexport const SET_STORY_POINT = 'set story point';\nexport const END_VOTE = 'end vote';\n","import { combineReducers } from 'redux';\nimport scrumPokerReducers from './scrum-poker-reducers';\n\n\nconst reducer = combineReducers({\n    scrumPokerReducers,\n});\n\nexport default reducer;\n","import { createStore,applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../store/reducers';\n\n\nconst store = createStore(reducers,applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport './Header.css'\nconst Header = () => (\n    <div>\n        <h1>Scrum Poker</h1>\n    </div>\n);\n\nHeader.propTypes = {};\nexport default Header","import { START_SESSION, GET_ACTIVE_STORY, SET_STORY_POINT, END_VOTE } from './types';\n\nexport const startSessionAction = (payload) => (dispatch) => {\n\tdispatch({\n\t\ttype: START_SESSION,\n\t\tpayload\n\t});\n};\n\nexport const getActiveStory = (payload) => (dispatch) => {\n\tdispatch({\n\t\ttype: GET_ACTIVE_STORY,\n\t\tpayload\n\t});\n};\n\nexport const setPoints = (payload) => (dispatch) => {\n\tdispatch({\n\t\ttype: SET_STORY_POINT,\n\t\tpayload\n\t});\n};\n\nexport const endVote = (payload) => (dispatch) => {\n\tdispatch({\n\t\ttype: END_VOTE,\n\t\tpayload\n\t});\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Header/Header';\nimport { NavLink } from 'react-router-dom';\nimport './Add-Story-List.css';\nimport { startSessionAction } from '../../store/actions/scrum-poker-actions';\n\nclass AddStoryList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsessionName: 'sprint planning 1',\n\t\t\tnumberOfVoters: 1,\n\t\t\tstoryList: [\n\t\t\t\t{\n\t\t\t\t\tstoryName: '',\n\t\t\t\t\tstoryPoint: 1,\n\t\t\t\t\tstatus: false\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n\n\trender() {\n\t\tconst { sessionName, numberOfVoters, storyList } = this.state;\n\t\tlet sessionData = {\n\t\t\tsessionName,\n\t\t\tnumberOfVoters,\n\t\t\tstoryList\n\t\t};\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"rowForNameAndVote\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<span>Session Name</span>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"inputText\"\n\t\t\t\t\t\t\t\tmaxLength=\"200\"\n\t\t\t\t\t\t\t\tvalue={sessionName}\n\t\t\t\t\t\t\t\tonChange={(e) => this.handleChangeSessionName(e)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<span>Number Of Voters</span>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"inputText\"\n\t\t\t\t\t\t\t\tonChange={(e) => this.handleChangeNumberOfVoters(e)}\n\t\t\t\t\t\t\t\tvalue={numberOfVoters}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"textAreaLabel\">Paste your story list (Each line will be converted as a story)</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tid=\"textarea\"\n\t\t\t\t\t\t\tclassName=\"textarea\"\n\t\t\t\t\t\t\trows=\"15\"\n\t\t\t\t\t\t\tcols=\"40\"\n\t\t\t\t\t\t\tonBlur={() => this.getStoryListAsArray()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<NavLink to=\"/poker-planning-view-as-scrum-master\">\n\t\t\t\t\t\t<button onClick={() => this.props.startSessionAction(sessionData)}>Start Session</button>\n\t\t\t\t\t</NavLink>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\thandleChangeSessionName = (e) => {\n\t\tthis.setState({ sessionName: e.target.value });\n\t};\n\n\thandleChangeNumberOfVoters = (e) => {\n\t\tthis.setState({ numberOfVoters: e.target.value.replace(/[^1-9]/, '') });\n\t};\n\n\tgetStoryListAsArray = () => {\n\t\tlet myStoryList = document.getElementById('textarea').value;\n\t\tlet arrayOfStoryList = myStoryList.split(/\\n/);\n\t\tlet list = arrayOfStoryList.map((item, index) => {\n\t\t\treturn {\n\t\t\t\tstoryName: item,\n\t\t\t\tstoryPoint: 0,\n\t\t\t\tstatus: false,\n\t\t\t\tstoryId: Math.random()\n\t\t\t};\n\t\t});\n\t\tthis.setState({\n\t\t\tstoryList: list\n\t\t});\n\t};\n}\n\nconst mapStateToProps = ({ scrumPokerReducers }) => {\n\tlet { sessionData } = scrumPokerReducers;\n\treturn { sessionData };\n};\n\nAddStoryList.propTypes = {\n\tsessionData: PropTypes.object\n};\n\nexport default connect(mapStateToProps, { startSessionAction })(AddStoryList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Story-List-Table.css';\nimport { getActiveStory } from '../../store/actions/scrum-poker-actions';\n\nclass StoryListTable extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Story</td>\n\t\t\t\t\t\t<td>Story Point</td>\n\t\t\t\t\t\t<td>Status</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.props.sessionData.storyList.map((item, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.props.getActiveStory(item);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{item.storyName}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>{item.storyPoint === 0 ? '' : item.storyPoint}</td>\n\t\t\t\t\t\t\t\t<td>{item.status === false ? 'Not Voted' : 'Voted'}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = ({ scrumPokerReducers }) => {\n\tlet { sessionData, activeStory } = scrumPokerReducers;\n\treturn { sessionData, activeStory };\n};\n\nStoryListTable.propTypes = {\n\tsessionData:PropTypes.object,\n\tactiveStory:PropTypes.object\n};\n\nexport default connect(mapStateToProps, { getActiveStory })(StoryListTable);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Active-Story-Vote.css';\nimport { setPoints } from '../../store/actions/scrum-poker-actions';\n\nclass ActiveStoryVote extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpointArray: [ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 134, '?' ],\n\t\t\tvotedPoints: [],\n\t\t\tnumberOfRemainingChoice: 0\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { sessionData } = this.props;\n\t\tthis.setState({ numberOfRemainingChoice: sessionData.numberOfVoters });\n\t}\n\n\trender() {\n\t\tconst { pointArray, numberOfRemainingChoice } = this.state;\n\t\tconst { activeStory } = this.props;\n\t\treturn (\n\t\t\t<div className=\"activeStoryContainer\">\n\t\t\t\t<div style={{ marginTop: '15px' }}>\n\t\t\t\t\t<span style={{ marginLeft: '10px' }}>{activeStory.storyName}</span>\n\t\t\t\t\t<span style={{ float: 'right', marginRight: '32px' }}>\n\t\t\t\t\t\tRemaining Choice {numberOfRemainingChoice}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"votes\">\n\t\t\t\t\t{pointArray.map((value, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"points\"\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tthis.setVotesForStory(value);\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tnumberOfRemainingChoice:\n\t\t\t\t\t\t\t\t\t\t\tthis.state.numberOfRemainingChoice !== 0\n\t\t\t\t\t\t\t\t\t\t\t\t? this.state.numberOfRemainingChoice - 1\n\t\t\t\t\t\t\t\t\t\t\t\t: this.state.numberOfRemainingChoice\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{value}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<button style={{ marginRight: '32px' }} onClick={() => this.sendVotes()}>\n\t\t\t\t\tsend votes\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tsetVotesForStory = (value) => {\n\t\tconst { sessionData } = this.props;\n\t\tconst { votedPoints } = this.state;\n\t\tif (parseInt(sessionData.numberOfVoters) == votedPoints.length) {\n\t\t\talert('No choice left!');\n\t\t} else {\n\t\t\tvotedPoints.push(value);\n\t\t}\n\t};\n\n\tsendVotes = () => {\n\t\tconst { setPoints, sessionData } = this.props;\n\t\tconst { votedPoints } = this.state;\n\t\tsetPoints(votedPoints);\n\t\tthis.setState({ votedPoints: [], numberOfRemainingChoice: sessionData.numberOfVoters });\n\t};\n}\n\nconst mapStateToProps = ({ scrumPokerReducers }) => {\n\tlet { activeStory, sessionData } = scrumPokerReducers;\n\treturn { activeStory, sessionData };\n};\n\nActiveStoryVote.propTypes = {\n\tsessionData: PropTypes.object,\n\tactiveStory: PropTypes.object\n};\n\nexport default connect(mapStateToProps, { setPoints })(ActiveStoryVote);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getActiveStory, endVote } from '../../store/actions/scrum-poker-actions';\nimport './Scrum-Master-Panel.css';\n\nclass ScrumMasterPanel extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfinalScore: 0\n\t\t};\n\t}\n\n\trender() {\n\t\tconst { sessionData, points, activeStory } = this.props;\n\t\tlet voterArray = Array(parseInt(sessionData.numberOfVoters)).fill(null).map((val, i) => {\n\t\t\treturn {\n\t\t\t\tvoterId: i,\n\t\t\t\tvotedPoint: 0\n\t\t\t};\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"scrumPanelContainer\">\n\t\t\t\t<div>Scrum Master Panel</div>\n\t\t\t\t<div style={{ marginTop: '10px', marginBottom: '20px' }}>\n\t\t\t\t\t{activeStory.storyName && <span>{activeStory.storyName} is active</span>}\n\t\t\t\t</div>\n\t\t\t\t{voterArray.map((item, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t\tVoter {index + 1} : {points[index]}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<div style={{ marginTop: '80px' }}>\n\t\t\t\t\t<div style={{ marginBottom: '10px' }}>Final Score</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"inputText\"\n\t\t\t\t\t\tonChange={(e) => this.handleFinalScore(e)}\n\t\t\t\t\t\tvalue={this.state.finalScore}\n\t\t\t\t\t\tstyle={{ width: '100px' }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.sendVote();\n\t\t\t\t\t}}\n\t\t\t\t\tstyle={{ marginTop: '20px' }}\n\t\t\t\t>\n\t\t\t\t\tEnd Voting For {activeStory.storyName}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\thandleFinalScore = (e) => {\n\t\tthis.setState({ finalScore: e.target.value });\n\t};\n\n\tsendVote = () => {\n\t\tconst { activeStory, endVote, sessionData } = this.props;\n\t\tconst { finalScore } = this.state;\n\t\tlet story = {\n\t\t\tsessionName: sessionData.sessionName,\n\t\t\tnumberOfVoters: sessionData.numberOfVoters,\n\t\t\tstoryList: [\n\t\t\t\t...sessionData.storyList.filter((item) => item.storyId !== activeStory.storyId),\n\t\t\t\t{\n\t\t\t\t\tstoryName: activeStory.storyName,\n\t\t\t\t\tstoryPoint: finalScore,\n\t\t\t\t\tstatus: true,\n\t\t\t\t\tstoryId: activeStory.storyId\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t\tendVote(story);\n\t\tthis.setState({ finalScore: 0 });\n\t};\n}\n\nconst mapStateToProps = ({ scrumPokerReducers }) => {\n\tlet { sessionData, points, activeStory } = scrumPokerReducers;\n\treturn { sessionData, points, activeStory };\n};\nScrumMasterPanel.propTypes = {\n\tsessionData: PropTypes.object,\n\tpoints: PropTypes.array,\n\tactiveStory: PropTypes.object\n};\nexport default connect(mapStateToProps, { getActiveStory, endVote })(ScrumMasterPanel);\n","import React, { Component } from 'react';\nimport StoryListTable from '../../components/Story-List-Table/Story-List-Table';\nimport ActiveStoryVote from '../../components/Active-Story-Vote/Active-Story-Vote';\nimport ScrumMasterPanel from '../../components/Scrum-Master-Panel/Scrum-Master-Panel';\nimport Header from '../../components/Header/Header';\n\nclass ViewAsScrumMaster extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n\t\t\t\t\t<StoryListTable />\n\t\t\t\t\t<ActiveStoryVote />\n\t\t\t\t\t<ScrumMasterPanel />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nViewAsScrumMaster.propTypes = {};\nexport default ViewAsScrumMaster;\n","import React, { Component } from 'react';\nimport StoryListTable from '../../components/Story-List-Table/Story-List-Table';\nimport ActiveStoryVote from '../../components/Active-Story-Vote/Active-Story-Vote';\nimport Header from '../../components/Header/Header';\n\nclass ViewAsDeveloper extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n\t\t\t\t\t<StoryListTable />\n\t\t\t\t\t<ActiveStoryVote />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nViewAsDeveloper.propTypes = {};\nexport default ViewAsDeveloper;\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport AddStoryList from './pages/Add-Story-List/Add-Story-List';\nimport ViewAsScrumMaster from './pages/View-As-Scrum-Master/View-As-Scrum-Master';\nimport ViewAsDeveloper from './pages/View-As-Developer/View-As-Developer';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <Switch>\n          <Route exact path=\"/poker-planning-add-story-list\" component={AddStoryList} />\n          <Route path=\"/poker-planning-view-as-scrum-master\" component={ViewAsScrumMaster} />\n          <Route path=\"/poker-planning-view-as-developer\" component={ViewAsDeveloper} />\n        </Switch>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\nReactDOM.render(<Router basename=\"/scrum-poker/\">\n<App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}